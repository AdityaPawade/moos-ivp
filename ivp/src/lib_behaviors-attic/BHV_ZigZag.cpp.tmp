/*****************************************************************/
/*    NAME: Michael Benjamin                                     */
/*    ORGN: NAVSEA Newport RI - MIT Dept. Mechanical Engineering */
/*    FILE: BHV_ZigZag.cpp                                       */
/*    DATE: July 11 2006                                         */
/*****************************************************************/

#ifdef _WIN32
#pragma warning(disable : 4786)
#pragma warning(disable : 4503)
#endif
#include <iostream>
#include <math.h> 
#include "BHV_Waypoint.h"
#include "AOF_WPT2D.h"
#include "AOF_WPT3D.h"
#include "OF_Reflector.h"
#include "MBUtils.h"
#include "AngleUtils.h"
#include "GeomUtils.h"
#include "BuildUtils.h"
#include "FunctionEncoder.h"

using namespace std;

//-----------------------------------------------------------
// Procedure: Constructor

BHV_ZigZag::BHV_ZigZag(IvPDomain gdomain) : 
  IvPBehavior(gdomain)
{
  this->setParam("descriptor", "(d)bhv_waypoint");
  this->setParam("unifbox", "course=3, speed=2");
  this->setParam("gridbox", "course=9, speed=6");

  domain = subDomain(domain, "course,speed");

  current_waypt   = 0;
  arrival_radius  = 10; // Meters
  cruise_speed    = 0;  // Meters/second
  nm_radius       = 0;  // Meters
  current_cpa     = 100000;
  lead_distance   = -1;
  repeat          = 0;
  completed       = false;

  osX   = -1;
  osY   = -1;
  osSPD = -1;
  ptX   = -1;
  ptY   = -1;
  iptX  = -1;
  iptY  = -1;

  info_vars.push_back("NAV_X");
  info_vars.push_back("NAV_Y");
  info_vars.push_back("NAV_SPEED");
}

//-----------------------------------------------------------
// Procedure: setParam
//     Notes: We expect the "waypoint" entries will be of the form
//            "xposition,yposition".
//            The "radius" parameter indicates what it means to have
//            arrived at the waypoint.

bool BHV_ZigZag::setParam(string param, string val) 
{
  if(IvPBehavior::setParamCommon(param, val))
    return(true);

  if((param == "polygon") || (param == "points")) {
    XYSegList new_seglist;
    bool ok = new_seglist.initialize(val);
    if(!ok)
      return(false);
    if(!param_lock)
      seglist = new_seglist;
    return(true);
  }
  else if(param == "speed") {
    double dval = atof(val.c_str());
    if((dval <= 0) || (!isNumber(val)))
      return(false);
    if(!param_lock)
      cruise_speed = dval;
    return(true);
  }
  else if(param == "lead") {
    double dval = atof(val.c_str());
    if((dval < 0) || (!isNumber(val)))
      return(false);
    if(!param_lock)
      lead_distance = dval;
    return(true);
  }
  else if(param == "order") {
    if((val!="reverse") && (val!="reversed") && (val!="normal"))
      return(false);
    if(!param_lock) {
      if((val == "reverse") || (val == "reversed"))
	seglist.reverse();
    }
    return(true);
  }
  else if(param == "repeat") {
    int ival = atoi(val.c_str());
    if((ival < 0) || (!isNumber(val)))
      return(false);
    if(!param_lock)
      repeat = ival;
    return(true);
  }
  else if(param == "radius") {
    double dval = atof(val.c_str());
    if(dval <= 0)
      return(false);
    if(!param_lock)
      arrival_radius = dval;
    return(true);
  }
  else if(param == "nm_radius")  {
    double dval = atof(val.c_str());
    if(dval <= 0) 
      return(false);
    if(!param_lock)
      nm_radius = dval;
    return(true);
  }
  return(false);
}


//-----------------------------------------------------------
// Procedure: produceOF

IvPFunction *BHV_ZigZag::produceOF() 
{
  if(!unif_box || !grid_box) {
    postEMessage("Null UnifBox or GridBox.");
    return(0);
  }

  // Set osX, osY, ptX, ptY, iptX, iptY;
  bool valid_point = setNextWaypoint();

  if(!valid_point) {
    return(0);
  }

  IvPFunction *ipf = 0;

  AOF_WPT2D aof(domain);
  aof.setParam("oslat", osY);
  aof.setParam("oslon", osX);
  aof.setParam("ptlat", iptY);
  aof.setParam("ptlon", iptX);
  aof.setParam("desired_speed", ptSPD);
  aof.initialize();
  
  OF_Reflector reflector(&aof, 1);
  reflector.create_uniform(unif_box, grid_box);
  ipf = reflector.extractOF();
  
  ipf->setPWT(priority_wt);

  if(!silent) {
    IvPBox mpt = ipf->getPDMap()->getGrid()->getMaxPt();
    cout << "BHV_ZigZag::produceOF():" << endl;
    cout << "maxpt:" << endl;
    mpt.print();
  }

  if(osSPD > 0) {
    double dist_meters = hypot((osX-ptX), (osY-ptY));
    double eta_seconds = dist_meters / osSPD;

    string stat = "vname=" + us_name + ",";
    stat += "index=" + intToString(current_waypt)   + ",";
    stat += "dist="  + doubleToString(dist_meters)  + ",";
    stat += "eta="   + doubleToString(eta_seconds);
    
    postMessage("VEHICLE_WPT_STAT_US", stat);
    postMessage("VEHICLE_WPT_STAT", stat);
    postMessage("VEHICLE_WPT_INDEX", current_waypt);
  }

  postMessage("VIEW_POLYGON", seglist.get_spec());

  return(ipf);
}

//-----------------------------------------------------------
// Procedure: setNextWaypoint

bool BHV_ZigZag::setNextWaypoint()
{
  // Need to know the name of ownship to query position
  if(us_name == "") {
    postEMessage("ownship name not known");
    return(false);
  }
  
  bool ok1, ok2, ok3;
  osX   = info_buffer->dQuery(us_name, "NAV_X",     &ok1);
  osY   = info_buffer->dQuery(us_name, "NAV_Y",     &ok2);
  osSPD = info_buffer->dQuery(us_name, "NAV_SPEED", &ok3);

  // Must get ownship position from InfoBuffer
  if(!ok1 || !ok2) {
    postEMessage("No ownship X/Y info in info_buffer.");
    return(false);
  }
  if(!ok3)
    postMessage("BHV_WARNING", "No ownship speed info in info_buffer.");

  int vsize = seglist.size();

  ptX  = seglist.get_vx(current_waypt);
  ptY  = seglist.get_vy(current_waypt);
  double dist = hypot((osX-ptX),(osY-ptY));

  ptSPD = cruise_speed;
  
  if(dist < current_cpa)
    current_cpa = dist;

  // Determine if waypoint we had been seeking has been reached
  bool next_point = false;
  if(dist < arrival_radius)
    next_point = true;
  else {
    if((nm_radius > arrival_radius) &&
       (dist > current_cpa) &&
       (current_cpa <= nm_radius))
      next_point = true;
  }

  // If arrived at waypoint we had been seeking, determine if
  // (1) just increment the waypoint, or
  // (2) start repeating the waypoints, or
  // (3) declare completion of the behavior.
  if(next_point) {
    if(current_waypt < ((vsize-1))) {
      current_waypt++;
      if((current_waypt == (vsize-1)) && (repeat > 0)) {
	current_waypt = 0;
	repeat--;
      }
      ptX = seglist.get_vx(current_waypt);
      ptY = seglist.get_vy(current_waypt);
      current_cpa = hypot((osX-ptX),(osY-ptY));
    }
    else {
      postMessage("VEHICLE_WPT_STAT_US", "complete");
      postMessage("VEHICLE_WPT_STAT", "complete");
      postEndFlags();
      completed = true;
      return(false);
    }
  }

  // By default, the steering point is the next waypoint.
  iptX = ptX;
  iptY = ptY;

  // If lead_distance is non-neg, and we've already hit the
  // first waypoint, then steer to an intermediate point that
  // is lead_distance away from the perpendicular intersection
  // point between the current position and the trackline.

  if(lead_distance >= 0) {
    if(current_waypt > 0) {
      double x1 = seglist.get_vx(current_waypt-1);
      double y1 = seglist.get_vx(current_waypt-1);

      double nx, ny;
      perpSegIntPt(x1,y1,ptX,ptY,osX,osY,nx,ny);

      double angle = relAng(x1,y1,ptX,ptY);
      double dist  = distToPoint(nx, ny, ptX, ptY);
      if(dist > lead_distance) 
	dist = lead_distance; 
      projectPoint(angle, dist, nx, ny, iptX, iptY);
    }
  }
    
  if(!silent) {
    cout << "current_waypt: " << current_waypt << endl;
    cout << "seglist.size(): " << seglist.size() << endl;
    cout << "   ptX:" <<  ptX << "  ptY:" << ptY  << endl;
    cout << "  iptX:" << iptX << " iptY:" << iptY << endl;
  }

  return(true);
}
