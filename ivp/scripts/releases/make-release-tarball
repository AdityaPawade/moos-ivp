#!/usr/bin/python

import os
import os.path
import sys

#===============================================================================

whitelist_library_dirs = [
   "lib_behaviors",
   "lib_marineview",
   "lib_helmivp",
   "lib_behaviors-marine",
   "lib_mbutil",
   "lib_bhvutil",
   "lib_navplot",
   "lib_geometry",
   "lib_ivpbuild",
   "lib_ivpcore",
   "lib_logic"
   ]

whitelist_app_dirs = [
   "app_logview",
   "app_polyview",
   "iMarineSim",
   "pEchoVar",
   "pHelmIvP",
   "pLogger",
   "pMarinePID",
   "pMarineViewer",
   "pTransponderAIS",
   "uTMS"
   ]

whitelist_moos_modules = [
   "MOOSLIB",
   "MOOSGenLib",
   "MOOSUtilityLib",
   "MOOSDB",
   "pLogger",
   "iRemote",
   "pAntler",
   "pMOOSBridge"
   ]

whitelist_additional_modules = [
   "uXMS",
   "uTermCommand",
   "uProcessWatch"
   ]

whitelist_modules =               \
   whitelist_library_dirs       + \
   whitelist_app_dirs           + \
   whitelist_moos_modules       + \
   whitelist_additional_modules

#===============================================================================

def print_usage_and_exit():
   s =  "Usage: make-release-tarball  <src-dir>  <working-dir>  <tarball-dir>\n" \
      + "\n" \
      + "Example:  ./make-release-tarball  ~/src/trunk  /tmp/foo  ~/my-tarballs"
   sys.exit(s)

#===============================================================================

def parse_cmd_line(argv):
   if len(argv) != 3:
      print_usage_and_exit()
      
   return {
      "src-dir":argv[0],
      "working-dir":argv[1],
      "tarball-dir":argv[2]
      }

#===============================================================================

def validate_parsed_cmd_line(args, tarball_pathname):
   if not os.path.isdir(args["src-dir"]):
      sys.exit("<src-dir> doesn't exist, or isn't a directory")
      
   src_dir_members = os.listdir(args["src-dir"])
   if not "build.sh" in src_dir_members:
      sys.exit("<src-dir> doesn't look right.  It should at least have a file called 'build.sh'.")
      
      
   if not os.path.isdir(args["working-dir"]):
      sys.exit("<working-dir> doesn't exist, or isn't a directory")
      
   if len(os.listdir(args["working-dir"])) != 0:
      sys.exit("<working-dir> must be an *empty* directory.")
      
      
      
   if not os.path.isdir(args["tarball-dir"]):
      sys.exit("<tarball-dir> doesn't exist, or isn't a directory")
      
   
   if os.path.exists(tarball_pathname):
      sys.exit("This script was going to produce a file named " + tarball_pathname + \
         ", but that file already exists.")
      
   #if os.path.exists(os.path.join(args["tarball-dir"], tarball_filename)):

      

#===============================================================================

def fixup_copied_src_tree(src_dir, copied_src_dir):
   pass

#===============================================================================

def generate_tarball_filename():
   pass

#===============================================================================

def create_tarball(copied_src_dir, tarball_dir, tarball_filename):
   pass

#===============================================================================

def test_tarball(tarball_filename):
   pass

#===============================================================================


# Copy the entire source tree, but then make these corrections:
# 1) Eliminate any subdirectory of ivp/src/ that's not in the whitelist 
#    of release-worthy projects.
#
# 2) Eliminate the scripts directory, which isn't currently relevant to
#    users.
#
# 3) Eliminate the old-style makefiles.
#
# 4) Replace lib_helmivp/Populator_BehaviorSet.cpp with a clean copy that lacks
#    private behaviors.

# Create the tarball

# Test the tarball
