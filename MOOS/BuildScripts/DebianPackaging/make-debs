#!/bin/sh

# Fail whenever something goes wrong.
set -e

#===============================================================================

print_usage() {
   echo "Usage: make-debs <moos-version> <build-num> <moos-dir> <deb-package-dir> <working-dir> [--no-matlab]"
   echo ""
   echo "   <moos-version> - for example, '7.0.1'"
   echo ""
   echo "   <moos-build-num> - for example, '1'.  "
   echo "        The Debian package version is <moos-version>-<moos-build-num>"
   echo "        For example: 7.0.1-1"
   echo ""
   echo "   <moos-dir> is the directory in which CMake built MOOS."
   echo "        This needs to have a fully configured (using CCMake)"
   echo "        version of MOOS.  It's ok for it to be built or not built."
   echo ""
   echo "   <deb-package-dir> is the directory into which the .deb files"
   echo "        produced by this script should be placed."
   echo ""
   echo "   <working-dir> is a pre-existing directory this script may use to"
   echo "        do scratch-work."
   echo ""
   echo "   --no-matlab This says that this script should *not* attempt to "
   echo "        build any Matlab-based packages, presumably because the build "
   echo "        machine doesn't have Matlab installed."
   echo ""
   echo "        If you don't specify this option, this script will assume that"
   echo "        the project has defined an install component named "
   echo "        'Moos_Tools_Matlab'."
}

#===============================================================================

parse_and_validate_cmd_line() {
   if [ "$#" -ne "5" ] && [ "$#" -ne "6" ];
   then
      print_usage
      exit 1
   fi 

   MOOS_VERSION="$1"
   MOOS_BUILD_NUM="$2"
   MOOS_DIR="$3"
   DEB_PACKAGE_DIR="$4"
   WORKING_DIR="$5"

   if ! (test -d ${MOOS_DIR}); then
      echo "The specified <moos-dir> ${MOOS_DIR} isn't an existing directory"
      exit 1
   fi

   if ! (test -d ${DEB_PACKAGE_DIR}); then
      echo "The specified <dev-package-dir> ${DEB_PACKAGE_DIR} isn't an existing directory"
      exit 1
   fi

   if ! (test -d ${WORKING_DIR}); then
      echo "The specified <working-dir> ${WORKING_DIR} isn't an existing directory"
      exit 1
   fi

   if [ $# -eq 6 ]; then
      if [ "$6" != "--no-matlab" ]; then
         print_usage
         exit 1
      fi

      BUILD_MATLAB_PACKAGES=F
   else
      BUILD_MATLAB_PACKAGES=T
   fi
      
}

#===============================================================================

# You must set the following variables for this function:
# * CONTROL_FILE_TEMPLATE - The path to the control file to be customized.
# * COPYRIGHT_FILE - The file that will become the package's copyright file, a
#   feature required for all valid Debian packages.
# * CHANGELOG_FILE - The file that will become the package's copyright file, a
#   feature required for all valid Debian packages.
# * PACKAGE_NAME - I.e., "moos-essentials-dev"
# * PACKAGE_VERSION - I.e., "7.0.1"
# * PACKAGE_BUILD_NUM - I.e., "1"
# * INSTALL_COMPONENT_NAME - Name of the CMake install component that will produce
#   this package's payload. I.e., "Moos_Essentials_Dev"
#
# The following variables are needed, but presumably have already been set by
# the "parse_and_validate_cmd_line" function:
# * MOOS_DIR
# * DEB_PACKAGE_DIR
# * WORKING_DIR
make_one_deb() {
   #----------------------------------------------------------------------------
   # Ensure the working directories exist and are empty...
   #----------------------------------------------------------------------------
   
   PACKAGE_WORKING_DIR=${WORKING_DIR}/${INSTALL_COMPONENT_NAME}-package-working-dir
   if test -d ${PACKAGE_WORKING_DIR}; then
      rm -rf ${PACKAGE_WORKING_DIR}/*
   else
      mkdir ${PACKAGE_WORKING_DIR}
   fi

   #----------------------------------------------------------------------------
   # Populate the directory with the package payload...
   #----------------------------------------------------------------------------
   THIS_DIRECTORY=${PWD}
   cd ${MOOS_DIR}
   make preinstall
   cd ${THIS_DIRECTORY}

   DESTDIR=${PACKAGE_WORKING_DIR} cmake                   \
      -DCMAKE_INSTALL_COMPONENT=${INSTALL_COMPONENT_NAME} \
      -DCMAKE_INSTALL_PREFIX=/usr                         \
      -P ${MOOS_DIR}/cmake_install.cmake

   #----------------------------------------------------------------------------
   # Do a sanity check - the installation should have put at least one file
   # there.  If not, the CMake install component we specified perhaps wasn't 
   # built.  Note that this check is somewhat dependent on the particular path
   # used to install this project's files; a different project may need a 
   # different test...
   #----------------------------------------------------------------------------
   if [ ! -d ${PACKAGE_WORKING_DIR}/usr ]; then
      echo "The directory '${PACKAGE_WORKING_DIR}/usr' doesn't exist."
      echo "Did you maybe forget to do what it takes for "
      echo "the project's '${INSTALL_COMPONENT_NAME}' CMake install component "
      echo "to build properly?"
      exit 1
   fi

   #----------------------------------------------------------------------------
   # Create the Debian packaging files...
   #----------------------------------------------------------------------------
   mkdir -p ${PACKAGE_WORKING_DIR}/DEBIAN

   cmake                                             \
      -DPACKAGE_VERSION:STRING=${PACKAGE_VERSION}                \
      -DPACKAGE_BUILD_NUM:STRING=${PACKAGE_BUILD_NUM}                \
      -DINPUT_FILE:STRING=${CONTROL_FILE_TEMPLATE}               \
      -DOUTPUT_FILE:STRING=${PACKAGE_WORKING_DIR}/DEBIAN/control \
      -DCMAKE_BACKWARDS_COMPATIBILITY:STRING=2.4            \
      -P customise-control-file.cmake
   
   mkdir -p ${PACKAGE_WORKING_DIR}/usr/share/doc/${PACKAGE_NAME}

   cp ${COPYRIGHT_FILE} ${PACKAGE_WORKING_DIR}/usr/share/doc/${PACKAGE_NAME}/copyright

   DEB_CL=${PACKAGE_WORKING_DIR}/usr/share/doc/${PACKAGE_NAME}/changelog.Debian.gz
   gzip -9 ${CHANGELOG_FILE} -c > ${DEB_CL}

   #----------------------------------------------------------------------------
   # Obey the Debian requirement of stripping executables and shared 
   # libraries...
   #----------------------------------------------------------------------------

   # TODO: This is a somewhat crude test for finding programs to strip, and if
   # we ever put shell scripts into this directory, we'll accidentall try to 
   # strip them also.
   # In the longer term we should modify our build system so that we can produce
   # either stripped or unstripped versions of each program / library. -CJC

   if test -d ${PACKAGE_WORKING_DIR}/usr/bin;
   then
      for f in ${PACKAGE_WORKING_DIR}/usr/bin/*/*
      do
         if file ${f} | grep executable | grep -q "not stripped"; 
         then
            echo "About to strip ${f}"
            strip ${f}
         else
            echo "Not going to strip ${f}"
         fi
      done
   fi

   # We don't currently produce shared libraries, so I'm not building that
   # functionality right now. -CJC

   #----------------------------------------------------------------------------
   # Build and verify the package...
   #----------------------------------------------------------------------------
   fakeroot dpkg-deb --build ${PACKAGE_WORKING_DIR} ${WORKING_DIR}

   # dpkg-deb uses the control file to decide how to name the .deb file it
   # produces.  But lintian needs to be told the name of the file to analyze, so
   # we need to calculate on our own the name of the .deb file so we can tell
   # lintian about it...
   PACKAGE_FILENAME=${PACKAGE_NAME}_${PACKAGE_VERSION}-${PACKAGE_BUILD_NUM}_i386.deb
   PACKAGE_PATHNAME=${WORKING_DIR}/${PACKAGE_FILENAME}
   lintian ${PACKAGE_PATHNAME}

   #----------------------------------------------------------------------------
   # Copy the package to the specified directory...
   #----------------------------------------------------------------------------
   cp ${PACKAGE_PATHNAME} ${DEB_PACKAGE_DIR}/
}

#===============================================================================

parse_and_validate_cmd_line $*

if [ "${BUILD_MATLAB_PACKAGES}" = T ]; then
  echo ">>> Building moos-tools-matlab" 
   # moos-tools-matlab...
   CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_Tools_Matlab.in \
   COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl        \
   CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_Tools_Matlab         \
   PACKAGE_VERSION=${MOOS_VERSION}                                  \
   PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                              \
   PACKAGE_NAME=moos-tools-matlab                                   \
   INSTALL_COMPONENT_NAME=Moos_Tools_Matlab                         \
   make_one_deb
else
   echo "Not going to build Matlab package(s), because of --no-matlab was given."
fi

# moos-core...
CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_Core.in  \
COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl \
CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_Core          \
PACKAGE_VERSION=${MOOS_VERSION}                           \
PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                       \
PACKAGE_NAME=moos-core                                    \
INSTALL_COMPONENT_NAME=Moos_Core                          \
make_one_deb

# moos-core-dev...
CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_Core_Dev.in \
COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl    \
CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_Core_Dev         \
PACKAGE_VERSION=${MOOS_VERSION}                              \
PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                          \
PACKAGE_NAME=moos-core-dev                                   \
INSTALL_COMPONENT_NAME=Moos_Core_Dev                         \
make_one_deb

# moos-essentials...
CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_Essentials.in \
COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl      \
CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_Essentials         \
PACKAGE_VERSION=${MOOS_VERSION}                                \
PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                            \
PACKAGE_NAME=moos-essentials                                   \
INSTALL_COMPONENT_NAME=Moos_Essentials                         \
make_one_deb

# moos-essentials-dev...
CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_Essentials_Dev.in \
COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl          \
CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_Essentials_Dev         \
PACKAGE_VERSION=${MOOS_VERSION}                                    \
PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                                \
PACKAGE_NAME=moos-essentials-dev                                   \
INSTALL_COMPONENT_NAME=Moos_Essentials_Dev                         \
make_one_deb

# moos-instruments...
CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_Instruments.in \
COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl       \
CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_Instruments         \
PACKAGE_VERSION=${MOOS_VERSION}                                 \
PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                             \
PACKAGE_NAME=moos-instruments                                   \
INSTALL_COMPONENT_NAME=Moos_Instruments                         \
make_one_deb

# moos-navigation-and-control...
CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_NavigationAndControl.in \
COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl                \
CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_NavigationAndControl         \
PACKAGE_VERSION=${MOOS_VERSION}                                          \
PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                                      \
PACKAGE_NAME=moos-navigation-and-control                                 \
INSTALL_COMPONENT_NAME=Moos_NavigationAndControl                         \
make_one_deb

# moos-navigation-and-control-dev...
CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_NavigationAndControl_Dev.in \
COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl                    \
CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_NavigationAndControl_Dev         \
PACKAGE_VERSION=${MOOS_VERSION}                                              \
PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                                          \
PACKAGE_NAME=moos-navigation-and-control-dev                                 \
INSTALL_COMPONENT_NAME=Moos_NavigationAndControl_Dev                         \
make_one_deb

# moos-thirdparty-dev...
CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_Thirdparty_Dev.in \
COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl          \
CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_Thirdparty_Dev         \
PACKAGE_VERSION=${MOOS_VERSION}                                    \
PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                                \
PACKAGE_NAME=moos-thirdparty-dev                                   \
INSTALL_COMPONENT_NAME=Moos_Thirdparty_Dev                         \
make_one_deb

# moos-tools...
CONTROL_FILE_TEMPLATE=FileTemplates/CONTROL-Moos_Tools.in \
COPYRIGHT_FILE=FileTemplates/COPYRIGHT-mit-and-oxford-gpl \
CHANGELOG_FILE=FileTemplates/CHANGELOG-Moos_Tools         \
PACKAGE_VERSION=${MOOS_VERSION}                           \
PACKAGE_BUILD_NUM=${MOOS_BUILD_NUM}                       \
PACKAGE_NAME=moos-tools                                   \
INSTALL_COMPONENT_NAME=Moos_Tools                         \
make_one_deb
